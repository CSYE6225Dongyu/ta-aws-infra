# Help files
HELP.md
lambda_function.zip
# Maven target directory
/target/
!**/src/main/**/target/
!**/src/test/**/target/

# Maven Wrapper files
.mvn/wrapper/maven-wrapper.jar

# Ignore sensitive application.properties (optional, if it contains sensitive info)
application.properties

# Maven specific files
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties

# Eclipse, IntelliJ, NetBeans and other IDE-specific files
### Eclipse/STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea/
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

# OS-specific files
.DS_Store
Thumbs.db

*.jar
*.war
*.log
*.tmp

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*
results.csv

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json
.terraform.lock.hcl

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
